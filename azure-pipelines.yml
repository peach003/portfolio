# Azure DevOps Pipeline for Portfolio Deployment
# File: azure-pipelines.yml

trigger:
  branches:
    include:
      - main
      - master
      - develop
  paths:
    exclude:
      - README.md
      - docs/*

pool:
  name: 'Default'

variables:
  # Build variables
  nodeVersion: '18.x'
  buildPath: '$(System.DefaultWorkingDirectory)'
  
  # Deployment variables
  targetServer: 'www.bon.cc'
  deployPath: '/var/www/portfolio'
  backupPath: '/var/www/portfolio-backup'
  
stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    displayName: 'Build Portfolio'
    steps:
    # Checkout source code
    - checkout: self
      clean: true
      fetchDepth: 1
    
    # Setup Node.js
    - task: NodeTool@0
      displayName: 'Setup Node.js'
      inputs:
        versionSpec: '$(nodeVersion)'
        checkLatest: true
    
    # Cache node_modules
    - task: Cache@2
      displayName: 'Cache node_modules'
      inputs:
        key: 'npm | "$(Agent.OS)" | package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
        path: '$(System.DefaultWorkingDirectory)/node_modules'
    
    # Install dependencies
    - script: |
        npm ci --prefer-offline --no-audit
      displayName: 'Install Dependencies'
      workingDirectory: '$(buildPath)'
    
    # Run tests (if available)
    - script: |
        if [ -f "package.json" ] && grep -q '"test"' package.json; then
          npm run test -- --coverage --watchAll=false
        else
          echo "No test script found, skipping tests"
        fi
      displayName: 'Run Tests'
      workingDirectory: '$(buildPath)'
      continueOnError: true
    
    # Build the Next.js project
    - script: |
        echo "Building Next.js portfolio project..."
        NODE_OPTIONS=--openssl-legacy-provider npm run build
        echo "Build completed successfully"
      displayName: 'Build Project'
      workingDirectory: '$(buildPath)'
    
    # Verify build output
    - script: |
        echo "=== Verifying build output ==="
        echo "Current directory contents:"
        ls -la
        echo ""
        if [ -d "out" ]; then
          echo "✅ out folder exists"
          echo "Files in out folder:"
          ls -la out/ | head -10
          echo "Total files: $(find out -type f | wc -l)"
        else
          echo "❌ out folder not found"
          echo "Available directories:"
          ls -la | grep "^d"
          exit 1
        fi
      displayName: 'Verify Build Output'
      workingDirectory: '$(buildPath)'
    
    # Archive build artifacts
    - task: ArchiveFiles@2
      displayName: 'Archive Build Files'
      condition: and(succeeded(), ne(variables['Agent.JobStatus'], 'Failed'))
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/out' 
        includeRootFolder: false
        archiveType: 'tar'
        archiveFile: '$(Build.ArtifactStagingDirectory)/portfolio-$(Build.BuildId).tar.gz'
        replaceExistingArchive: true
    
    # Verify archive was created
    - script: |
        echo "=== Checking build artifacts ==="
        ls -la $(Build.ArtifactStagingDirectory)/
        if [ -f "$(Build.ArtifactStagingDirectory)/portfolio-$(Build.BuildId).tar.gz" ]; then
          echo "✅ Archive created successfully"
          echo "Archive size: $(du -h $(Build.ArtifactStagingDirectory)/portfolio-$(Build.BuildId).tar.gz)"
          echo "Archive contents (first 10 files):"
          tar -tzf "$(Build.ArtifactStagingDirectory)/portfolio-$(Build.BuildId).tar.gz" | head -10
        else
          echo "❌ Archive not found"
          exit 1
        fi
      displayName: 'Verify Archive'
    
    # Publish artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'portfolio-build'
        publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployToVM
    displayName: 'Deploy to Virtual Machine'
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          # Download build artifacts
          - download: current
            artifact: portfolio-build
          
          # Create backup and prepare deployment directory
          - task: SSH@0
            displayName: 'Create Backup'
            inputs:
              sshEndpoint: 'VM-SSH-Connection' # Service connection name
              runOptions: 'inline'
              inline: |
                #!/bin/bash
                set -e
                
                echo "Starting backup and preparation process..."
                
                # Create backup of current deployment
                if [ -d "$(deployPath)" ]; then
                  echo "Creating backup of existing deployment..."
                  sudo rm -rf $(backupPath)
                  sudo cp -r $(deployPath) $(backupPath)
                  echo "✅ Backup created at $(backupPath)"
                else
                  echo "ℹ️  No existing deployment found, skipping backup"
                fi
                
                # Ensure deployment directory exists
                echo "Preparing deployment directory..."
                sudo mkdir -p $(deployPath)
                sudo chown -R $(whoami):www-data $(deployPath) 2>/dev/null || sudo chown -R $(whoami):$(whoami) $(deployPath)
                echo "✅ Deployment directory ready"
          
          # Copy files to server
          - task: CopyFilesOverSSH@0
            displayName: 'Copy Files to Server'
            inputs:
              sshEndpoint: 'VM-SSH-Connection'
              sourceFolder: '$(Pipeline.Workspace)/portfolio-build/'
              contents: 'portfolio-$(Build.BuildId).tar.gz'
              targetFolder: '/tmp/'
              cleanTargetFolder: false
          
          # Deploy application
          - task: SSH@0
            displayName: 'Deploy Application'
            inputs:
              sshEndpoint: 'VM-SSH-Connection'
              runOptions: 'inline'
              inline: |
                #!/bin/bash
                set -e
                
                echo "Starting deployment process..."
                
                # Verify uploaded file exists
                if [ ! -f "/tmp/portfolio-$(Build.BuildId).tar.gz" ]; then
                  echo "❌ Archive file not found in /tmp/"
                  exit 1
                fi
                
                # Clear deployment directory
                echo "Clearing deployment directory..."
                sudo rm -rf $(deployPath)/*
                
                # Extract and deploy
                echo "Extracting archive..."
                cd /tmp
                tar -xzf portfolio-$(Build.BuildId).tar.gz -C $(deployPath)
                
                # Set proper permissions
                echo "Setting permissions..."
                sudo chown -R www-data:www-data $(deployPath) 2>/dev/null || sudo chown -R $(whoami):$(whoami) $(deployPath)
                sudo chmod -R 755 $(deployPath)
                
                # Restart web server (adjust based on your setup)
                echo "Restarting web server..."
                if systemctl is-active --quiet nginx; then
                  sudo systemctl reload nginx
                  echo "✅ Nginx reloaded"
                elif systemctl is-active --quiet apache2; then
                  sudo systemctl reload apache2
                  echo "✅ Apache2 reloaded"
                else
                  echo "ℹ️  No web server service found to restart"
                fi
                
                # Clean up
                echo "Cleaning up temporary files..."
                rm -f /tmp/portfolio-$(Build.BuildId).tar.gz
                
                echo "✅ Deployment completed successfully"
          
          # Health check
          - task: SSH@0
            displayName: 'Health Check'
            inputs:
              sshEndpoint: 'VM-SSH-Connection'
              runOptions: 'inline'
              inline: |
                #!/bin/bash
                
                echo "Starting health check..."
                
                # Wait a moment for the deployment to settle
                sleep 10
                
                # Check if we can reach the site
                echo "Testing site availability..."
                response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost 2>/dev/null || echo "000")
                
                if [ "$response" = "200" ]; then
                  echo "✅ Health check passed - Site is responding (HTTP $response)"
                  
                  # Additional check for specific content (optional)
                  if curl -s http://localhost | grep -q "<!DOCTYPE html" 2>/dev/null; then
                    echo "✅ HTML content verification passed"
                  fi
                  
                else
                  echo "❌ Health check failed - HTTP response: $response"
                  
                  # Rollback if health check fails and backup exists
                  BACKUP_DIR="$(backupPath)"
                  LATEST_BACKUP=$(ls -1t "$BACKUP_DIR"/backup-* 2>/dev/null | head -n 1)
                  
                  if [ -n "$LATEST_BACKUP" ] && [ -d "$LATEST_BACKUP" ]; then
                    echo "🔄 Rolling back to previous version..."
                    echo "Using backup: $LATEST_BACKUP"
                    
                    # Clear current deployment and restore backup
                    rm -rf $(deployPath)/*
                    cp -r "$LATEST_BACKUP"/* $(deployPath)/
                    chmod -R 755 $(deployPath)
                    
                    # Try to restart web server after rollback
                    if command -v systemctl >/dev/null 2>&1; then
                      if systemctl is-active --quiet nginx 2>/dev/null; then
                        systemctl reload nginx 2>/dev/null && echo "✅ Nginx reloaded after rollback" || echo "⚠️  Could not reload nginx"
                      elif systemctl is-active --quiet apache2 2>/dev/null; then
                        systemctl reload apache2 2>/dev/null && echo "✅ Apache2 reloaded after rollback" || echo "⚠️  Could not reload apache2"
                      fi
                    fi
                    
                    echo "✅ Rollback completed"
                  else
                    echo "❌ No backup available for rollback"
                  fi
                  
                  exit 1
                fi

- stage: Notification
  displayName: 'Notification Stage'
  dependsOn: 
    - Build
    - Deploy
  condition: always()
  jobs:
  - job: NotifyTeam
    displayName: 'Send Notifications'
    steps:
    - script: |
        echo "=== DEPLOYMENT SUMMARY ==="
        echo "📦 Build ID: $(Build.BuildId)"
        echo "🌿 Branch: $(Build.SourceBranch)"
        echo "👤 Triggered by: $(Build.RequestedFor)"
        echo "⏰ Started: $(System.JobStartTime)"
        echo "🖥️  Target: $(targetServer)"
        echo ""
        
        if [ "$AGENT_JOBSTATUS" = "Succeeded" ]; then
          echo "✅ PORTFOLIO DEPLOYMENT SUCCESSFUL!"
          echo "🌐 Site URL: http://www.bon.cc"
          echo "🚀 New version is now live"
          echo ""
          echo "Next steps:"
          echo "- Verify site functionality"
          echo "- Monitor performance"
          echo "- Check analytics"
        else
          echo "❌ PORTFOLIO DEPLOYMENT FAILED!"
          echo "🔍 Please check the pipeline logs for details"
          echo "📧 Consider notifying the development team"
          echo ""
          echo "Troubleshooting:"
          echo "- Check build logs for errors"
          echo "- Verify SSH connections"
          echo "- Ensure server resources are available"
        fi
        
        echo "=========================="
      displayName: 'Display Deployment Status'