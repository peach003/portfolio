# Azure DevOps Pipeline for Portfolio Deployment
# File: azure-pipelines.yml

trigger:
  branches:
    include:
      - main
      - master
      - develop
  paths:
    exclude:
      - README.md
      - docs/*

pool:
  name: Default          

variables:
  # Build variables
  nodeVersion: '18.x'  # Â¶ÇÊûúÊÉ≥ÈÅøÂÖç OpenSSL ÈóÆÈ¢òÔºåÂèØ‰ª•ÊîπÊàê '16.x'
  buildPath: '$(System.DefaultWorkingDirectory)'
  distPath: '$(System.DefaultWorkingDirectory)/dist'
  
  # Deployment variables
  targetServer: 'www.bon.cc'
  deployPath: '/var/www/portfolio'
  backupPath: '/var/www/portfolio-backup'
  
stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    displayName: 'Build Portfolio'
    steps:
    # Checkout source code
    - checkout: self
      clean: true
      fetchDepth: 1
    
    # Setup Node.js
    - task: NodeTool@0
      displayName: 'Setup Node.js'
      inputs:
        versionSpec: '$(nodeVersion)'
        checkLatest: true
    
    # Cache node_modules
    - task: Cache@2
      displayName: 'Cache node_modules'
      inputs:
        key: 'npm | "$(Agent.OS)" | package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
        path: '$(System.DefaultWorkingDirectory)/node_modules'
    
    # Install dependencies
    - script: |
        npm ci --prefer-offline --no-audit
        npm install cross-env --save-dev
      displayName: 'Install Dependencies'
      workingDirectory: '$(buildPath)'
    
    # Run tests (if available)
    - script: |
        if [ -f "package.json" ] && grep -q '"test"' package.json; then
          npm run test -- --coverage --watchAll=false
        else
          echo "No test script found, skipping tests"
        fi
      displayName: 'Run Tests'
      workingDirectory: '$(buildPath)'
      continueOnError: true
    
    # Build the project (Ë∑®Âπ≥Âè∞ÂÖºÂÆπ OpenSSL ÈóÆÈ¢ò)
    - script: |
        if grep -q '"build"' package.json; then
          npx cross-env NODE_OPTIONS=--openssl-legacy-provider npm run build
        elif [ -d "src" ]; then
          echo "No build script found but src directory exists"
          mkdir -p dist
          cp -r src/* dist/ 2>/dev/null || cp -r ./* dist/
        else
          mkdir -p dist
          cp -r ./* dist/
          rm -rf dist/node_modules dist/.git dist/.gitignore dist/azure-pipelines.yml
        fi
      displayName: 'Build Project'
      workingDirectory: '$(buildPath)'
    
    # Archive build artifacts
    - task: ArchiveFiles@2
      displayName: 'Archive Build Files'
      inputs:
        rootFolderOrFile: '$(distPath)'
        includeRootFolder: false
        archiveType: 'tar'
        archiveFile: '$(Build.ArtifactStagingDirectory)/portfolio-$(Build.BuildId).tar.gz'
        replaceExistingArchive: true
    
    # Publish artifacts
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'portfolio-build'
        publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployToVM
    displayName: 'Deploy to Virtual Machine'
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          # Download build artifacts
          - download: current
            artifact: portfolio-build
          
          # Deploy via SSH
          - task: SSH@0
            displayName: 'Create Backup'
            inputs:
              sshEndpoint: 'VM-SSH-Connection'
              runOptions: 'commands'
              commands: |
                if [ -d "$(deployPath)" ]; then
                  sudo rm -rf $(backupPath)
                  sudo cp -r $(deployPath) $(backupPath)
                  echo "Backup created at $(backupPath)"
                fi
                sudo mkdir -p $(deployPath)
                sudo chown -R $(whoami):www-data $(deployPath)
          
          - task: CopyFilesOverSSH@0
            displayName: 'Copy Files to Server'
            inputs:
              sshEndpoint: 'VM-SSH-Connection'
              sourceFolder: '$(Pipeline.Workspace)/portfolio-build/'
              contents: 'portfolio-$(Build.BuildId).tar.gz'
              targetFolder: '/tmp/'
              cleanTargetFolder: false
          
          - task: SSH@0
            displayName: 'Deploy Application'
            inputs:
              sshEndpoint: 'VM-SSH-Connection'
              runOptions: 'commands'
              commands: |
                cd /tmp
                tar -xzf portfolio-$(Build.BuildId).tar.gz -C $(deployPath) --strip-components=0
                sudo chown -R www-data:www-data $(deployPath)
                sudo chmod -R 755 $(deployPath)
                if systemctl is-active --quiet nginx; then
                  sudo systemctl reload nginx
                elif systemctl is-active --quiet apache2; then
                  sudo systemctl reload apache2
                fi
                rm -f /tmp/portfolio-$(Build.BuildId).tar.gz
                echo "Deployment completed successfully"
          
          - task: SSH@0
            displayName: 'Health Check'
            inputs:
              sshEndpoint: 'VM-SSH-Connection'
              runOptions: 'commands'
              commands: |
                sleep 10
                response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost || echo "000")
                if [ "$response" = "200" ]; then
                  echo "Health check passed - Site is responding"
                else
                  echo "Health check failed - HTTP response: $response"
                  if [ -d "$(backupPath)" ]; then
                    echo "Rolling back to previous version"
                    sudo rm -rf $(deployPath)
                    sudo mv $(backupPath) $(deployPath)
                    sudo systemctl reload apache2
                  fi
                  exit 1
                fi

- stage: Notification
  displayName: 'Notification Stage'
  dependsOn: 
    - Build
    - Deploy
  condition: always()
  jobs:
  - job: NotifyTeam
    displayName: 'Send Notifications'
    steps:
    - script: |
        if [ "$AGENT_JOBSTATUS" = "Succeeded" ]; then
          echo "‚úÖ Portfolio deployment successful!"
          echo "üåê Site: http://www.bon.cc"
          echo "üì¶ Build: $(Build.BuildId)"
          echo "üöÄ Deployed from: $(Build.SourceBranch)"
        else
          echo "‚ùå Portfolio deployment failed!"
          echo "üîç Check logs for details"
          echo "üì¶ Build: $(Build.BuildId)"
        fi
      displayName: 'Display Status'
