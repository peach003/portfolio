trigger:
  branches:
    include:
      - main
      - master
      - develop

pool:
  name: Default   # 使用 Self-hosted Agent

variables:
  nodeVersion: '18.x'   # 或 '16.x' 避免 OpenSSL 问题
  deployPath: '/var/www/portfolio'
  backupPath: '/var/www/portfolio-backup'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    displayName: 'Build Node + React'
    steps:
    # 拉取代码
    - checkout: self
      clean: true
      fetchDepth: 1

    # 设置 Node 版本
    - task: NodeTool@0
      displayName: 'Setup Node.js'
      inputs:
        versionSpec: '$(nodeVersion)'
        checkLatest: true

    # 构建 React 前端
    - script: |
        cd client
        npm ci
        npm install cross-env --save-dev
        npx cross-env NODE_OPTIONS=--openssl-legacy-provider npm run build
        mkdir -p ../dist/public
        cp -r build/* ../dist/public/
      displayName: 'Build React Frontend'

    # 构建 Node.js 后端
    - script: |
        cd server
        npm ci
        npm run build   # 假设输出到 server/dist
        cp -r dist/* ../dist/
      displayName: 'Build Node Backend'

    # 打包 dist 目录
    - task: ArchiveFiles@2
      displayName: 'Archive Build Files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/dist'
        includeRootFolder: false
        archiveType: 'tar'
        archiveFile: '$(Build.ArtifactStagingDirectory)/portfolio-$(Build.BuildId).tar.gz'
        replaceExistingArchive: true

    # 发布构建产物
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'portfolio-build'
        publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployToVM
    displayName: 'Deploy to VM'
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:
          # 下载构建产物
          - download: current
            artifact: portfolio-build
          
          # 创建备份
          - task: SSH@0
            displayName: 'Backup Current Deployment'
            inputs:
              sshEndpoint: 'VM-SSH-Connection'
              runOptions: 'commands'
              commands: |
                if [ -d "$(deployPath)" ]; then
                  sudo rm -rf $(backupPath)
                  sudo cp -r $(deployPath) $(backupPath)
                  echo "Backup created at $(backupPath)"
                fi

          # 上传文件到 /tmp
          - task: CopyFilesOverSSH@0
            displayName: 'Copy Package to Server'
            inputs:
              sshEndpoint: 'VM-SSH-Connection'
              sourceFolder: '$(Pipeline.Workspace)/portfolio-build/'
              contents: 'portfolio-$(Build.BuildId).tar.gz'
              targetFolder: '/tmp/'
              cleanTargetFolder: false

          # 解压到部署目录
          - task: SSH@0
            displayName: 'Deploy Application'
            inputs:
              sshEndpoint: 'VM-SSH-Connection'
              runOptions: 'commands'
              commands: |
                sudo mkdir -p $(deployPath)
                sudo tar -xzf /tmp/portfolio-$(Build.BuildId).tar.gz -C $(deployPath) --strip-components=0
                sudo chown -R www-data:www-data $(deployPath)
                sudo chmod -R 755 $(deployPath)
                # 重启 Node.js 服务（PM2）
                if command -v pm2 >/dev/null 2>&1; then
                  pm2 restart all || pm2 start server.js --name portfolio --cwd $(deployPath)
                fi
                # 重载 Apache
                if systemctl is-active --quiet apache2; then
                  sudo systemctl reload apache2
                fi
                rm -f /tmp/portfolio-$(Build.BuildId).tar.gz
                echo "Deployment completed"

          # 健康检查
          - task: SSH@0
            displayName: 'Health Check'
            inputs:
              sshEndpoint: 'VM-SSH-Connection'
              runOptions: 'commands'
              commands: |
                sleep 5
                status_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost || echo "000")
                if [ "$status_code" != "200" ]; then
                  echo "Health check failed: $status_code"
                  if [ -d "$(backupPath)" ]; then
                    echo "Rolling back..."
                    sudo rm -rf $(deployPath)
                    sudo mv $(backupPath) $(deployPath)
                    sudo systemctl reload apache2
                  fi
                  exit 1
                else
                  echo "Health check passed."
                fi
