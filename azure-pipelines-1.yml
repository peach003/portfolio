# ============================================================================
# Security Monitoring Pipeline with SonarQube
# ============================================================================
# 使用SonarQube + Snyk + ZAP的完整安全管道
# ============================================================================

trigger:
  branches:
    include:
      - portfolio2

pool:
  name: 'Default'

variables:
  nodeVersion: '18.x'
  buildPath: '$(System.DefaultWorkingDirectory)'
  sonarCloudOrganization: '8600315'
  sonarCloudProjectKey: '8600315_Portfolio'
  sonarCloudProjectName: 'Portfolio'
  zapVmIp: 'localhost'
  zapPort: '8080'
  targetUrl: 'http://www.bon.cc'
  zapApiKey: ''

stages:
- stage: StaticSecurity
  displayName: 'Static Security Analysis'
  jobs:
  
  # SonarQube代码分析
  - job: SonarQubeAnalysis
    displayName: 'SonarQube Code Analysis'
    steps:
    
    - checkout: self
      fetchDepth: 0
    
    - task: NodeTool@0
      displayName: 'Setup Node.js'
      inputs:
        versionSpec: '$(nodeVersion)'
        checkLatest: true
    
    # 关键修改：使用SonarCloudPrepare而不是SonarQubePrepare
    - task: SonarCloudPrepare@1
      displayName: 'Prepare SonarCloud Analysis'
      inputs:
        SonarCloud: 'Sonar'
        organization: '$(sonarCloudOrganization)'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: '$(sonarCloudProjectKey)'
        cliProjectName: '$(sonarCloudProjectName)'
        cliSources: '.'
        extraProperties: |
          sonar.exclusions=**/node_modules/**,**/out/**,**/.next/**,**/coverage/**,**/*.min.js,**/public/**
          sonar.javascript.lcov.reportPaths=coverage/lcov.info
          sonar.typescript.lcov.reportPaths=coverage/lcov.info
          sonar.coverage.exclusions=**/*.test.js,**/*.spec.js,**/test/**,**/tests/**,**/__tests__/**
    
    - script: |
        npm ci --prefer-offline --no-audit
      displayName: 'Install Dependencies'
      workingDirectory: '$(buildPath)'
    
    - script: |
        if [ -f "package.json" ] && grep -q '"test.*coverage"' package.json; then
          npm run test:coverage || npm run test -- --coverage --watchAll=false || true
        else
          echo "No coverage test script found, skipping coverage"
        fi
      displayName: 'Run Tests with Coverage'
      workingDirectory: '$(buildPath)'
      continueOnError: true
    
    # 使用SonarCloudAnalyze
    - task: SonarCloudAnalyze@1
      displayName: 'Run SonarCloud Code Analysis'
    
    # 使用SonarCloudPublish
    - task: SonarCloudPublish@1
      displayName: 'Publish SonarCloud Quality Gate Result'
      inputs:
        pollingTimeoutSec: '300'

  # Snyk依赖扫描
  - job: SnykSecurity
    displayName: 'Snyk Dependency Security Scan'
    steps:
    
    - checkout: self
    
    - task: NodeTool@0
      displayName: 'Setup Node.js for Snyk'
      inputs:
        versionSpec: '$(nodeVersion)'
        checkLatest: true
    
    - script: |
        npm ci --prefer-offline --no-audit
      displayName: 'Install Dependencies for Snyk'
      workingDirectory: '$(buildPath)'
    
    - task: SnykSecurityScan@1
      displayName: 'Run Snyk Security Scan'
      inputs:
        serviceConnectionEndpoint: 'Snyk'
        testType: 'app'
        severityThreshold: 'medium'
        monitorWhen: 'always'
        failOnIssues: false
        projectName: '$(sonarCloudProjectName)'
        additionalArguments: '--file=package.json'
    
    - task: PublishTestResults@2
      displayName: 'Publish Snyk Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/*snyk-test-results.xml'
        mergeTestResults: true
        failTaskOnFailedTests: false
      condition: always()

# 动态安全测试阶段（ZAP）- 保持不变
- stage: DynamicSecurity
  displayName: 'Dynamic Security Testing'
  dependsOn: StaticSecurity
  condition: succeeded()
  jobs:
  
  - job: ZAPSecurityScan
    displayName: 'OWASP ZAP Security Scan'
    steps:
    
    - task: PowerShell@2
      displayName: 'Check ZAP Service Status'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Checking ZAP service status..."
          try {
            $response = Invoke-RestMethod -Uri "http://$(zapVmIp):$(zapPort)/JSON/core/view/version/"
            Write-Host "ZAP is running. Version: $($response.version)"
          }
          catch {
            Write-Error "ZAP service is not accessible"
            Write-Host "Start ZAP with: ./zap.sh -daemon -host 0.0.0.0 -port $(zapPort)"
            throw
          }
    
    - task: PowerShell@2
      displayName: 'Wait for Website Availability'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Checking website availability at $(targetUrl)..."
          Start-Sleep -Seconds 30
          
          $maxAttempts = 5
          $attempt = 0
          
          do {
            $attempt++
            try {
              $response = Invoke-WebRequest -Uri "$(targetUrl)" -UseBasicParsing -TimeoutSec 30
              if ($response.StatusCode -eq 200) {
                Write-Host "Website is available!"
                break
              }
            }
            catch {
              if ($attempt -lt $maxAttempts) {
                Write-Host "Attempt $attempt failed, retrying..."
                Start-Sleep -Seconds 30
              }
            }
          } while ($attempt -lt $maxAttempts)
    
    - task: PowerShell@2
      displayName: 'ZAP Security Scan'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Starting ZAP security scan..."
          $apiKeyParam = if ("$(zapApiKey)" -ne "") { "&apikey=$(zapApiKey)" } else { "" }
          
          # 创建会话
          $newSessionUrl = "http://$(zapVmIp):$(zapPort)/JSON/core/action/newSession/?name=portfolio-scan&overwrite=true$apiKeyParam"
          Invoke-RestMethod -Uri $newSessionUrl | Out-Null
          
          # 配置上下文
          $encodedUrl = [System.Web.HttpUtility]::UrlEncode("$(targetUrl).*")
          $contextUrl = "http://$(zapVmIp):$(zapPort)/JSON/context/action/includeInContext/?contextName=Default+Context&regex=$encodedUrl$apiKeyParam"
          Invoke-RestMethod -Uri $contextUrl | Out-Null
          
          # Spider扫描
          $encodedTargetUrl = [System.Web.HttpUtility]::UrlEncode("$(targetUrl)")
          $spiderUrl = "http://$(zapVmIp):$(zapPort)/JSON/spider/action/scan/?url=$encodedTargetUrl$apiKeyParam"
          $spiderResponse = Invoke-RestMethod -Uri $spiderUrl
          $spiderScanId = $spiderResponse.scan
          
          # 等待Spider完成
          do {
            Start-Sleep -Seconds 10
            $statusUrl = "http://$(zapVmIp):$(zapPort)/JSON/spider/view/status/?scanId=$spiderScanId$apiKeyParam"
            $progress = [int](Invoke-RestMethod -Uri $statusUrl).status
            Write-Host "Spider progress: $progress%"
          } while ($progress -lt 100)
          
          # 主动扫描
          $activeScanUrl = "http://$(zapVmIp):$(zapPort)/JSON/ascan/action/scan/?url=$encodedTargetUrl$apiKeyParam"
          $activeScanResponse = Invoke-RestMethod -Uri $activeScanUrl
          $activeScanId = $activeScanResponse.scan
          
          # 等待主动扫描完成
          do {
            Start-Sleep -Seconds 20
            $statusUrl = "http://$(zapVmIp):$(zapPort)/JSON/ascan/view/status/?scanId=$activeScanId$apiKeyParam"
            $progress = [int](Invoke-RestMethod -Uri $statusUrl).status
            Write-Host "Active scan progress: $progress%"
          } while ($progress -lt 100)
          
          Write-Host "ZAP scan completed"
      timeoutInMinutes: 45
    
    - task: PowerShell@2
      displayName: 'Generate Security Reports'
      inputs:
        targetType: 'inline'
        script: |
          $apiKeyParam = if ("$(zapApiKey)" -ne "") { "?apikey=$(zapApiKey)" } else { "" }
          $reportDir = "$(Build.ArtifactStagingDirectory)"
          
          if (-not (Test-Path $reportDir)) {
            New-Item -ItemType Directory -Path $reportDir -Force
          }
          
          # HTML报告
          $htmlReportUrl = "http://$(zapVmIp):$(zapPort)/OTHER/core/other/htmlreport/$apiKeyParam"
          $htmlReport = Invoke-WebRequest -Uri $htmlReportUrl -UseBasicParsing -TimeoutSec 120
          $htmlReport.Content | Out-File -FilePath "$reportDir/zap-security-report.html" -Encoding UTF8
          
          # JSON报告
          $jsonReportUrl = "http://$(zapVmIp):$(zapPort)/JSON/core/view/alerts/$apiKeyParam"
          $jsonReport = Invoke-RestMethod -Uri $jsonReportUrl
          $jsonReport | ConvertTo-Json -Depth 10 | Out-File -FilePath "$reportDir/zap-security-report.json" -Encoding UTF8
          
          # 获取摘要
          $alertsUrl = "http://$(zapVmIp):$(zapPort)/JSON/core/view/alertsSummary/$apiKeyParam"
          $alertsSummary = Invoke-RestMethod -Uri $alertsUrl
          
          Write-Host "Security Scan Results:"
          Write-Host "  High Risk: $($alertsSummary.alertsSummary.High)"
          Write-Host "  Medium Risk: $($alertsSummary.alertsSummary.Medium)"
          Write-Host "  Low Risk: $($alertsSummary.alertsSummary.Low)"
          
          # 设置变量
          Write-Host "##vso[task.setvariable variable=ZAP_HIGH_RISK;isOutput=true]$($alertsSummary.alertsSummary.High)"
          Write-Host "##vso[task.setvariable variable=ZAP_MEDIUM_RISK;isOutput=true]$($alertsSummary.alertsSummary.Medium)"
          Write-Host "##vso[task.setvariable variable=ZAP_LOW_RISK;isOutput=true]$($alertsSummary.alertsSummary.Low)"
      condition: always()
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Security Reports'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'security-reports'
      condition: always()

# 安全门禁阶段
- stage: SecurityGates
  displayName: 'Security Quality Gates'
  dependsOn: 
    - StaticSecurity
    - DynamicSecurity
  condition: always()
  jobs:
  
  - job: SecurityValidation
    displayName: 'Security Gate Validation'
    variables:
      ZAP_HIGH_RISK: $[ stageDependencies.DynamicSecurity.ZAPSecurityScan.outputs['GenerateSecurityReports.ZAP_HIGH_RISK'] ]
      ZAP_MEDIUM_RISK: $[ stageDependencies.DynamicSecurity.ZAPSecurityScan.outputs['GenerateSecurityReports.ZAP_MEDIUM_RISK'] ]
      ZAP_LOW_RISK: $[ stageDependencies.DynamicSecurity.ZAPSecurityScan.outputs['GenerateSecurityReports.ZAP_LOW_RISK'] ]
    
    steps:
    - task: PowerShell@2
      displayName: 'Evaluate Security Results'
      inputs:
        targetType: 'inline'
        script: |
          $highRisk = if ($env:ZAP_HIGH_RISK) { [int]$env:ZAP_HIGH_RISK } else { 0 }
          $mediumRisk = if ($env:ZAP_MEDIUM_RISK) { [int]$env:ZAP_MEDIUM_RISK } else { 0 }
          
          Write-Host "Security Status:"
          Write-Host "  High Risk: $highRisk"
          Write-Host "  Medium Risk: $mediumRisk"
          
          if ($highRisk -gt 0) {
            Write-Host "##vso[task.logissue type=error]Security Gate Failed: $highRisk high-risk vulnerabilities"
            Write-Host "SECURITY GATE: FAILED" -ForegroundColor Red
            exit 1
          } else {
            Write-Host "SECURITY GATE: PASSED" -ForegroundColor Green
          }

schedules:
- cron: "0 3 * * 1"
  displayName: Weekly Security Scan
  branches:
    include:
    - portfolio2
  always: true