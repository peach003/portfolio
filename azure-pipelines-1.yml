# ============================================================================
# Security Monitoring Pipeline with SonarQube
# ============================================================================
# 使用SonarQube + Snyk + ZAP的完整安全管道
# ============================================================================

trigger:
  branches:
    include:
      - portfolio2  # 恢复原始配置

pool:
  name: 'Default'

variables:
  nodeVersion: '18.x'
  buildPath: '$(System.DefaultWorkingDirectory)'
  sonarCloudOrganization: '8600315'
  sonarCloudProjectKey: '8600315_Portfolio'
  sonarCloudProjectName: 'Portfolio'
  zapVmIp: 'localhost'
  zapPort: '8080'
  targetUrl: 'http://www.bon.cc'
  zapApiKey: ''

stages:
- stage: StaticSecurity
  displayName: 'Static Security Analysis'
  jobs:
  
  # SonarQube代码分析
  - job: SonarQubeAnalysis
    displayName: 'SonarQube Code Analysis'
    steps:
    
    - checkout: self
      fetchDepth: 0
    
    - task: NodeTool@0
      displayName: 'Setup Node.js'
      inputs:
        versionSpec: '$(nodeVersion)'
        checkLatest: true
    
    # 关键修改：使用SonarCloudPrepare而不是SonarQubePrepare
    - task: SonarCloudPrepare@1
      displayName: 'Prepare SonarCloud Analysis'
      inputs:
        SonarCloud: 'Sonar'
        organization: '$(sonarCloudOrganization)'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: '$(sonarCloudProjectKey)'
        cliProjectName: '$(sonarCloudProjectName)'
        cliSources: '.'
        extraProperties: |
          sonar.exclusions=**/node_modules/**,**/out/**,**/.next/**,**/coverage/**,**/*.min.js,**/public/**
          sonar.javascript.lcov.reportPaths=coverage/lcov.info
          sonar.typescript.lcov.reportPaths=coverage/lcov.info
          sonar.coverage.exclusions=**/*.test.js,**/*.spec.js,**/test/**,**/tests/**,**/__tests__/**
    
    - script: |
        npm ci --prefer-offline --no-audit
      displayName: 'Install Dependencies'
      workingDirectory: '$(buildPath)'
    
    - script: |
        if [ -f "package.json" ] && grep -q '"test.*coverage"' package.json; then
          npm run test:coverage || npm run test -- --coverage --watchAll=false || true
        else
          echo "No coverage test script found, skipping coverage"
        fi
      displayName: 'Run Tests with Coverage'
      workingDirectory: '$(buildPath)'
      continueOnError: true
    
    # 使用SonarCloudAnalyze
    - task: SonarCloudAnalyze@1
      displayName: 'Run SonarCloud Code Analysis'
      continueOnError: true  # 即使失败也继续
    
    # 使用SonarCloudPublish - 只在分析成功时执行
    - task: SonarCloudPublish@1
      displayName: 'Publish SonarCloud Quality Gate Result'
      inputs:
        pollingTimeoutSec: '300'
      condition: succeededOrFailed()  # 即使前面步骤失败也尝试
      continueOnError: true  # 如果发布失败，不阻断流水线

  # Snyk依赖扫描
  - job: SnykSecurity
    displayName: 'Snyk Dependency Security Scan'
    steps:
    
    - checkout: self
    
    - task: NodeTool@0
      displayName: 'Setup Node.js for Snyk'
      inputs:
        versionSpec: '$(nodeVersion)'
        checkLatest: true
    
    - script: |
        npm ci --prefer-offline --no-audit
      displayName: 'Install Dependencies for Snyk'
      workingDirectory: '$(buildPath)'
    
    - task: SnykSecurityScan@1
      displayName: 'Run Snyk Security Scan'
      inputs:
        serviceConnectionEndpoint: 'Snyk'
        testType: 'app'
        severityThreshold: 'medium'
        monitorWhen: 'always'
        failOnIssues: false
        projectName: '$(sonarCloudProjectName)'
        additionalArguments: '--file=package.json'
    
    - task: PublishTestResults@2
      displayName: 'Publish Snyk Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/*snyk-test-results.xml'
        mergeTestResults: true
        failTaskOnFailedTests: false
      condition: always()

# 动态安全测试阶段（ZAP）- 保持不变
- stage: DynamicSecurity
  displayName: 'Dynamic Security Testing'
  dependsOn: StaticSecurity
  condition: succeeded()
  jobs:
  
  - job: ZAPSecurityScan
    displayName: 'OWASP ZAP Security Scan'
    steps:
    
    - task: Bash@3
      displayName: 'Check ZAP Service Status'
      inputs:
        targetType: 'inline'
        script: |
          echo "Checking ZAP service status..."
          if curl -s "http://$(zapVmIp):$(zapPort)/JSON/core/view/version/" > /dev/null 2>&1; then
            VERSION=$(curl -s "http://$(zapVmIp):$(zapPort)/JSON/core/view/version/" | grep -o '"version":"[^"]*"' | cut -d'"' -f4)
            echo "ZAP is running. Version: $VERSION"
          else
            echo "##vso[task.logissue type=error]ZAP service is not accessible"
            echo "Start ZAP with: ./zap.sh -daemon -host 0.0.0.0 -port $(zapPort)"
            exit 1
          fi
    
    - task: Bash@3
      displayName: 'Wait for Website Availability'
      inputs:
        targetType: 'inline'
        script: |
          echo "Checking website availability at $(targetUrl)..."
          sleep 30
          
          MAX_ATTEMPTS=5
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS..."
            
            if HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$(targetUrl)" 2>/dev/null) && [ "$HTTP_CODE" = "200" ]; then
              echo "Website is available! HTTP $HTTP_CODE"
              break
            else
              echo "Attempt $ATTEMPT failed"
              if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
                echo "Retrying in 30 seconds..."
                sleep 30
              fi
            fi
          done
    
    - task: Bash@3
      displayName: 'ZAP Security Scan'
      inputs:
        targetType: 'inline'
        script: |
          echo "Starting ZAP security scan..."
          API_KEY_PARAM=""
          if [ -n "$(zapApiKey)" ]; then
            API_KEY_PARAM="&apikey=$(zapApiKey)"
          fi
          
          # 创建会话
          curl -s "http://$(zapVmIp):$(zapPort)/JSON/core/action/newSession/?name=portfolio-scan&overwrite=true${API_KEY_PARAM}" > /dev/null
          
          # 配置上下文
          ENCODED_URL=$(echo "$(targetUrl).*" | jq -sRr @uri)
          curl -s "http://$(zapVmIp):$(zapPort)/JSON/context/action/includeInContext/?contextName=Default+Context&regex=${ENCODED_URL}${API_KEY_PARAM}" > /dev/null
          
          # Spider扫描
          ENCODED_TARGET=$(echo "$(targetUrl)" | jq -sRr @uri)
          SPIDER_ID=$(curl -s "http://$(zapVmIp):$(zapPort)/JSON/spider/action/scan/?url=${ENCODED_TARGET}${API_KEY_PARAM}" | grep -o '"scan":"[0-9]*"' | cut -d'"' -f4)
          echo "Spider scan started with ID: $SPIDER_ID"
          
          # 等待Spider完成
          while true; do
            PROGRESS=$(curl -s "http://$(zapVmIp):$(zapPort)/JSON/spider/view/status/?scanId=${SPIDER_ID}${API_KEY_PARAM}" | grep -o '"status":"[0-9]*"' | cut -d'"' -f4)
            echo "Spider progress: ${PROGRESS}%"
            if [ "$PROGRESS" = "100" ]; then
              break
            fi
            sleep 10
          done
          
          # 主动扫描
          ASCAN_ID=$(curl -s "http://$(zapVmIp):$(zapPort)/JSON/ascan/action/scan/?url=${ENCODED_TARGET}${API_KEY_PARAM}" | grep -o '"scan":"[0-9]*"' | cut -d'"' -f4)
          echo "Active scan started with ID: $ASCAN_ID"
          
          # 等待主动扫描完成
          while true; do
            PROGRESS=$(curl -s "http://$(zapVmIp):$(zapPort)/JSON/ascan/view/status/?scanId=${ASCAN_ID}${API_KEY_PARAM}" | grep -o '"status":"[0-9]*"' | cut -d'"' -f4)
            echo "Active scan progress: ${PROGRESS}%"
            if [ "$PROGRESS" = "100" ]; then
              break
            fi
            sleep 20
          done
          
          echo "ZAP scan completed"
      timeoutInMinutes: 45
    
    - task: Bash@3
      displayName: 'Generate Security Reports'
      inputs:
        targetType: 'inline'
        script: |
          API_KEY_PARAM=""
          if [ -n "$(zapApiKey)" ]; then
            API_KEY_PARAM="?apikey=$(zapApiKey)"
          fi
          
          REPORT_DIR="$(Build.ArtifactStagingDirectory)"
          mkdir -p "$REPORT_DIR"
          
          # HTML报告
          curl -s "http://$(zapVmIp):$(zapPort)/OTHER/core/other/htmlreport/${API_KEY_PARAM}" -o "$REPORT_DIR/zap-security-report.html"
          
          # JSON报告
          curl -s "http://$(zapVmIp):$(zapPort)/JSON/core/view/alerts/${API_KEY_PARAM}" | jq '.' > "$REPORT_DIR/zap-security-report.json"
          
          # 获取摘要
          SUMMARY=$(curl -s "http://$(zapVmIp):$(zapPort)/JSON/core/view/alertsSummary/${API_KEY_PARAM}")
          HIGH=$(echo "$SUMMARY" | grep -o '"High":"[0-9]*"' | cut -d'"' -f4)
          MEDIUM=$(echo "$SUMMARY" | grep -o '"Medium":"[0-9]*"' | cut -d'"' -f4)
          LOW=$(echo "$SUMMARY" | grep -o '"Low":"[0-9]*"' | cut -d'"' -f4)
          
          echo "Security Scan Results:"
          echo "  High Risk: ${HIGH:-0}"
          echo "  Medium Risk: ${MEDIUM:-0}"
          echo "  Low Risk: ${LOW:-0}"
          
          # 设置变量
          echo "##vso[task.setvariable variable=ZAP_HIGH_RISK;isOutput=true]${HIGH:-0}"
          echo "##vso[task.setvariable variable=ZAP_MEDIUM_RISK;isOutput=true]${MEDIUM:-0}"
          echo "##vso[task.setvariable variable=ZAP_LOW_RISK;isOutput=true]${LOW:-0}"
      condition: always()
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Security Reports'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'security-reports'
      condition: always()

# 安全门禁阶段
- stage: SecurityGates
  displayName: 'Security Quality Gates'
  dependsOn: 
    - StaticSecurity
    - DynamicSecurity
  condition: always()
  jobs:
  
  - job: SecurityValidation
    displayName: 'Security Gate Validation'
    variables:
      ZAP_HIGH_RISK: $[ stageDependencies.DynamicSecurity.ZAPSecurityScan.outputs['GenerateSecurityReports.ZAP_HIGH_RISK'] ]
      ZAP_MEDIUM_RISK: $[ stageDependencies.DynamicSecurity.ZAPSecurityScan.outputs['GenerateSecurityReports.ZAP_MEDIUM_RISK'] ]
      ZAP_LOW_RISK: $[ stageDependencies.DynamicSecurity.ZAPSecurityScan.outputs['GenerateSecurityReports.ZAP_LOW_RISK'] ]
    
    steps:
    - task: Bash@3
      displayName: 'Evaluate Security Results'
      inputs:
        targetType: 'inline'
        script: |
          echo "Evaluating security scan results..."
          echo "Target: $(targetUrl)"
          echo ""
          
          # 获取变量值，默认为0
          HIGH_RISK=${ZAP_HIGH_RISK:-0}
          MEDIUM_RISK=${ZAP_MEDIUM_RISK:-0}
          
          echo "Security Status:"
          echo "  High Risk: $HIGH_RISK"
          echo "  Medium Risk: $MEDIUM_RISK"
          
          if [ "$HIGH_RISK" -gt 0 ]; then
            echo "##vso[task.logissue type=error]Security Gate Failed: $HIGH_RISK high-risk vulnerabilities"
            echo "SECURITY GATE: FAILED"
            exit 1
          else
            echo "SECURITY GATE: PASSED"
          fi

schedules:
- cron: "0 3 * * 1"
  displayName: Weekly Security Scan
  branches:
    include:
    - portfolio2  # 恢复原始配置
  always: true