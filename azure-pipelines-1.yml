# ============================================================================
# Security Monitoring Pipeline (Without SonarCloud)
# ============================================================================
# 专注于 Snyk + ZAP 的安全扫描，暂时跳过 SonarCloud
# ============================================================================
pr: none

trigger:
  branches:
    include:
      - portfolio2

pool:
  name: 'Default'

variables:
  nodeVersion: '18.x'
  buildPath: '$(System.DefaultWorkingDirectory)'
  zapVmIp: 'localhost'
  zapPort: '8080'
  targetUrl: 'http://www.bon.cc'
  zapApiKey: ''

stages:
- stage: StaticSecurity
  displayName: 'Static Security Analysis'
  jobs:
  
  # Snyk依赖扫描
  - job: SnykSecurity
    displayName: 'Snyk Dependency Security Scan'
    steps:
    
    - checkout: self
    
    - task: NodeTool@0
      displayName: 'Setup Node.js for Snyk'
      inputs:
        versionSpec: '$(nodeVersion)'
        checkLatest: true
    
    - script: |
        npm ci --prefer-offline --no-audit
      displayName: 'Install Dependencies for Snyk'
      workingDirectory: '$(buildPath)'
    
    - task: SnykSecurityScan@1
      displayName: 'Run Snyk Security Scan'
      inputs:
        serviceConnectionEndpoint: 'Snyk'
        testType: 'app'
        severityThreshold: 'medium'
        monitorWhen: 'always'
        failOnIssues: false
        projectName: 'Portfolio'
        additionalArguments: '--file=package.json'
    
    - task: PublishTestResults@2
      displayName: 'Publish Snyk Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/*snyk-test-results.xml'
        mergeTestResults: true
        failTaskOnFailedTests: false
      condition: always()

- stage: DynamicSecurity
  displayName: 'Dynamic Security Testing'
  dependsOn: StaticSecurity
  condition: succeeded()
  jobs:
  
  - job: ZAPSecurityScan
    displayName: 'OWASP ZAP Security Scan'
    steps:
    
    - task: Bash@3
      displayName: 'Check ZAP Service Status'
      inputs:
        targetType: 'inline'
        script: |
          echo "Checking ZAP service status..."
          if curl -s "http://$(zapVmIp):$(zapPort)/JSON/core/view/version/" > /dev/null 2>&1; then
            VERSION=$(curl -s "http://$(zapVmIp):$(zapPort)/JSON/core/view/version/" | grep -o '"version":"[^"]*"' | cut -d'"' -f4)
            echo "✅ ZAP is running. Version: $VERSION"
          else
            echo "##vso[task.logissue type=error]❌ ZAP service is not accessible"
            echo "Start ZAP with: ./zap.sh -daemon -host 0.0.0.0 -port $(zapPort)"
            exit 1
          fi
    
    - task: Bash@3
      displayName: 'Wait for Website Availability'
      inputs:
        targetType: 'inline'
        script: |
          echo "Checking website availability at $(targetUrl)..."
          sleep 30
          
          MAX_ATTEMPTS=5
          ATTEMPT=0
          
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS..."
            
            if HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$(targetUrl)" 2>/dev/null) && [ "$HTTP_CODE" = "200" ]; then
              echo "✅ Website is available! HTTP $HTTP_CODE"
              break
            else
              echo "Attempt $ATTEMPT failed"
              if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
                echo "Retrying in 30 seconds..."
                sleep 30
              fi
            fi
          done
    
    - task: Bash@3
      displayName: 'ZAP Security Scan'
      inputs:
        targetType: 'inline'
        script: |
          echo "Starting ZAP security scan..."
          API_KEY_PARAM=""
          if [ -n "$(zapApiKey)" ]; then
            API_KEY_PARAM="&apikey=$(zapApiKey)"
          fi
          
          # 创建会话
          curl -s "http://$(zapVmIp):$(zapPort)/JSON/core/action/newSession/?name=portfolio-scan&overwrite=true${API_KEY_PARAM}" > /dev/null
          
          # 配置上下文 - 使用 Python 进行 URL 编码（不需要 jq）
          ENCODED_URL=$(python3 -c "import urllib.parse; print(urllib.parse.quote('$(targetUrl).*'))")
          curl -s "http://$(zapVmIp):$(zapPort)/JSON/context/action/includeInContext/?contextName=Default+Context&regex=${ENCODED_URL}${API_KEY_PARAM}" > /dev/null
          
          # Spider扫描
          ENCODED_TARGET=$(python3 -c "import urllib.parse; print(urllib.parse.quote('$(targetUrl)'))")
          SPIDER_RESPONSE=$(curl -s "http://$(zapVmIp):$(zapPort)/JSON/spider/action/scan/?url=${ENCODED_TARGET}${API_KEY_PARAM}")
          SPIDER_ID=$(echo "$SPIDER_RESPONSE" | grep -o '"scan":"[0-9]*"' | grep -o '[0-9]*')
          echo "Spider scan started with ID: $SPIDER_ID"
          
          # 等待Spider完成
          while true; do
            STATUS_RESPONSE=$(curl -s "http://$(zapVmIp):$(zapPort)/JSON/spider/view/status/?scanId=${SPIDER_ID}${API_KEY_PARAM}")
            PROGRESS=$(echo "$STATUS_RESPONSE" | grep -o '"status":"[0-9]*"' | grep -o '[0-9]*')
            echo "Spider progress: ${PROGRESS}%"
            if [ "$PROGRESS" = "100" ]; then
              break
            fi
            sleep 10
          done
          echo "Spider scan completed"
          
          # 主动扫描
          ASCAN_RESPONSE=$(curl -s "http://$(zapVmIp):$(zapPort)/JSON/ascan/action/scan/?url=${ENCODED_TARGET}${API_KEY_PARAM}")
          ASCAN_ID=$(echo "$ASCAN_RESPONSE" | grep -o '"scan":"[0-9]*"' | grep -o '[0-9]*')
          echo "Active scan started with ID: $ASCAN_ID"
          
          # 等待主动扫描完成
          while true; do
            STATUS_RESPONSE=$(curl -s "http://$(zapVmIp):$(zapPort)/JSON/ascan/view/status/?scanId=${ASCAN_ID}${API_KEY_PARAM}")
            PROGRESS=$(echo "$STATUS_RESPONSE" | grep -o '"status":"[0-9]*"' | grep -o '[0-9]*')
            echo "Active scan progress: ${PROGRESS}%"
            if [ "$PROGRESS" = "100" ]; then
              break
            fi
            sleep 20
          done
          
          echo "ZAP scan completed"
      timeoutInMinutes: 45
    
    - task: Bash@3
      displayName: 'Generate Security Reports'
      inputs:
        targetType: 'inline'
        script: |
          API_KEY_PARAM=""
          if [ -n "$(zapApiKey)" ]; then
            API_KEY_PARAM="?apikey=$(zapApiKey)"
          fi
          
          REPORT_DIR="$(Build.ArtifactStagingDirectory)"
          mkdir -p "$REPORT_DIR"
          
          echo "Generating security reports..."
          
          # HTML报告
          curl -s "http://$(zapVmIp):$(zapPort)/OTHER/core/other/htmlreport/${API_KEY_PARAM}" -o "$REPORT_DIR/zap-security-report.html"
          echo "HTML report generated"
          
          # JSON报告
          curl -s "http://$(zapVmIp):$(zapPort)/JSON/core/view/alerts/${API_KEY_PARAM}" > "$REPORT_DIR/zap-security-report.json"
          echo "JSON report generated"
          
          # 获取摘要 - 使用 grep 替代 jq
          SUMMARY=$(curl -s "http://$(zapVmIp):$(zapPort)/JSON/core/view/alertsSummary/${API_KEY_PARAM}")
          HIGH=$(echo "$SUMMARY" | grep -o '"High":"[0-9]*"' | grep -o '[0-9]*')
          MEDIUM=$(echo "$SUMMARY" | grep -o '"Medium":"[0-9]*"' | grep -o '[0-9]*')
          LOW=$(echo "$SUMMARY" | grep -o '"Low":"[0-9]*"' | grep -o '[0-9]*')
          
          echo ""
          echo "================ SECURITY SCAN RESULTS ================"
          echo "  High Risk:   ${HIGH:-0}"
          echo "  Medium Risk: ${MEDIUM:-0}"
          echo "  Low Risk:    ${LOW:-0}"
          echo "======================================================="
          
          # 设置变量
          echo "##vso[task.setvariable variable=ZAP_HIGH_RISK;isOutput=true]${HIGH:-0}"
          echo "##vso[task.setvariable variable=ZAP_MEDIUM_RISK;isOutput=true]${MEDIUM:-0}"
          echo "##vso[task.setvariable variable=ZAP_LOW_RISK;isOutput=true]${LOW:-0}"
      condition: always()
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Security Reports'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'security-reports'
      condition: always()

- stage: SecurityGates
  displayName: 'Security Quality Gates'
  dependsOn: 
    - StaticSecurity
    - DynamicSecurity
  condition: always()
  jobs:
  
  - job: SecurityValidation
    displayName: 'Security Gate Validation'
    variables:
      ZAP_HIGH_RISK: $[ stageDependencies.DynamicSecurity.ZAPSecurityScan.outputs['GenerateSecurityReports.ZAP_HIGH_RISK'] ]
      ZAP_MEDIUM_RISK: $[ stageDependencies.DynamicSecurity.ZAPSecurityScan.outputs['GenerateSecurityReports.ZAP_MEDIUM_RISK'] ]
      ZAP_LOW_RISK: $[ stageDependencies.DynamicSecurity.ZAPSecurityScan.outputs['GenerateSecurityReports.ZAP_LOW_RISK'] ]
    
    steps:
    - task: Bash@3
      displayName: 'Evaluate Security Results'
      inputs:
        targetType: 'inline'
        script: |
          echo "Evaluating security scan results..."
          echo "Target: $(targetUrl)"
          echo ""
          
          # 获取变量值，默认为0
          HIGH_RISK=${ZAP_HIGH_RISK:-0}
          MEDIUM_RISK=${ZAP_MEDIUM_RISK:-0}
          LOW_RISK=${ZAP_LOW_RISK:-0}
          
          echo "Current Security Status:"
          echo "  High Risk:   $HIGH_RISK vulnerabilities"
          echo "  Medium Risk: $MEDIUM_RISK vulnerabilities"
          echo "  Low Risk:    $LOW_RISK vulnerabilities"
          echo ""
          
          # 安全门禁标准
          MAX_HIGH=0
          MAX_MEDIUM=2
          MAX_LOW=10
          
          echo "Security Gate Standards:"
          echo "  High Risk:   Maximum $MAX_HIGH allowed"
          echo "  Medium Risk: Maximum $MAX_MEDIUM allowed"
          echo "  Low Risk:    Maximum $MAX_LOW allowed"
          echo ""
          
          if [ "$HIGH_RISK" -gt "$MAX_HIGH" ]; then
            echo "##vso[task.logissue type=error]Security Gate Failed: $HIGH_RISK high-risk vulnerabilities"
            echo "❌ SECURITY GATE: FAILED"
            echo ""
            echo "Recommended Actions:"
            echo "1. Review ZAP security report in artifacts"
            echo "2. Fix high-risk vulnerabilities first"
            echo "3. Re-run security scan after fixes"
            exit 1
          else
            echo "✅ SECURITY GATE: PASSED"
            echo "Your portfolio website meets security standards!"
          fi

schedules:
- cron: "0 3 * * 1"
  displayName: Weekly Security Scan
  branches:
    include:
    - portfolio2
  always: true